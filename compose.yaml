# For development only
# Provide common service for system
# Not run springboot and nextjs application right away
# Checkout readme for more details



volumes:
  mssql-data:

services:
  clockee-db:
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    container_name: clockee-db
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${SA_PASSWORD:-example_123}
    ports:
      - 1433:1433
    volumes:
      - mssql-data:/var/opt/mssql
    restart: always
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "${SA_PASSWORD:-example_123}" -Q "SELECT 1" -C -t 30 || exit 1
      interval: 15s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - clockee-network


  sqlserver.configurator:
    image: mcr.microsoft.com/mssql-tools
    container_name: sqlserver.configurator
    depends_on:
      clockee-db:
        condition: service_healthy
    volumes:
      - ./db:/scripts
    entrypoint: ["/bin/bash", "-c", "/scripts/init.sh \"${SA_PASSWORD:-example_123}\""]
    networks:
      - clockee-network

  clockee-mail-server:
    container_name: clockee-mail-server
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
    networks:
      - clockee-network


  ### FOR FAST DEVELOPMENT I PREFER TO MANNUALY RUN BACKEND AND FRONTEND END INSTEAD OF SERVICE ###

  redis:
    image: redis:bookworm
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - clockee-network

  # clockee-server:
  #   build:
  #     context: ./clockee-server/
  #     dockerfile: Dockerfile.prod
  #   image: clockee-server
  #   container_name: clockee-server
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - DBMS_HOST=clockee-db
  #     - SPRING_PROFILES_ACTIVE=prod
  #     - SPRING_PROFILES_ACTIVE=sa
  #     - SPRING_PROFILES_ACTIVE=example_123
  #     - SPRING_MAIL_HOST=clockee-mail-server
  #     - APP=clockee-mail-server
  #     - FRONTEND_HOST=clockee-web

  #   networks:
  #     - clockee-network


  # clockee-web:
  #   build:
  #     context: ./clockee-ui/
  #     dockerfile: Dockerfile.prod
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules

  #   networks:
  #     - clockee-network


networks:
  clockee-network:
    driver: bridge
